pub(crate) fn is_opaque_string(s: &str) -> bool {
    let mut context = 0;
    !s.is_empty()
        && s.char_indices()
            .all(|(i, c)| context_validate(c, s, i, &mut context).unwrap_or_else(|| is_valid(c)))
}

pub(crate) const fn is_opaque_string_ascii(s: &str) -> bool {
    let b = s.as_bytes();
    if s.is_empty() || !b.is_ascii() {
        return false;
    }
    let (mut index, len) = (0, b.len());
    while index < len {
        if matches!(b[index], b'\0'..=b'\x1f' | b'\x7f'..) {
            return false;
        }
        index += 1;
    }
    true
}

fn is_valid(c: char) -> bool {
    match c {
        '\0'..='\u{ff}' => !matches!(c as u8, b'\0'..=b'\x1f' | b'\x7f'..=b'\x9f' | b'\xad'),
        '\u{100}'..='\u{ffff}' => is_valid_binary(RANGES_U16.binary_search(&(c as u16))),
        '\u{10000}'..='\u{1ffff}' => is_valid_binary(RANGES_U17.binary_search(&(c as u16))),
        '\u{20000}'..='\u{2a6d6}'
        | '\u{2a700}'..='\u{2b734}'
        | '\u{2b740}'..='\u{2b81d}'
        | '\u{2f800}'..='\u{2fa1d}' => true,
        _ => false,
    }
}

fn context_validate(c: char, s: &str, i: usize, context: &mut u8) -> Option<bool> {
    fn before(s: &str, i: usize) -> &str {
        unsafe { s.get_unchecked(0..i) }
    }
    fn starting_from(s: &str, i: usize) -> &str {
        unsafe { s.get_unchecked(i..) }
    }
    fn zero_width_joiner(s: &str) -> bool {
        matches!(s.chars().next_back(), Some(c) if is_virama(c))
    }
    fn middle_dot(s: &str, i: usize) -> bool {
        const UTF_8_LEN: usize = char::len_utf8('\u{b7}');
        let (before, after) = (before(s, i), starting_from(s, i + UTF_8_LEN));
        matches!((before.chars().next_back(), after.chars().next()), (Some('l'), Some('l')))
    }
    fn arabic_indic_digits(s: &str, start: char, end: char, context: &mut u8) -> bool {
        let res = (*context & 1) != 0 || !s.chars().any(|c| (start..=end).contains(&c));
        *context |= res as u8;
        res
    }
    fn hebrew_punctuation(s: &str) -> bool {
        matches!(s.chars().next_back(), Some(c) if is_hebrew(c))
    }
    fn greek_lower_numeral_sign(s: &str, i: usize) -> bool {
        const UTF_8_LEN: usize = char::len_utf8('\u{375}');
        matches!(starting_from(s, i + UTF_8_LEN).chars().next(), Some(c) if is_greek(c))
    }
    fn katakana_middle_dot(s: &str, context: &mut u8) -> bool {
        let res = *context & 2 != 0 || s.chars().any(is_kana_or_han);
        *context |= (res as u8) << 1;
        res
    }
    fn zero_width_nonjoiner(s: &str, i: usize) -> bool {
        let mut before = before(s, i).chars();
        let Some(mut c) = before.next_back() else {
            return false;
        };
        if is_virama(c) {
            return true;
        }
        while is_transparent(c) {
            let Some(new) = before.next_back() else {
                return false;
            };
            c = new;
        }
        if c != '\u{a872}' && !is_dual_joining(c) {
            return false;
        }
        const UTF_8_LEN: usize = char::len_utf8('\u{200c}');
        for c in starting_from(s, i + UTF_8_LEN).chars() {
            if !is_transparent(c) {
                return is_right_joining(c) || is_dual_joining(c);
            }
        }
        false
    }
    let c = c as u32;
    match c.wrapping_mul(0x37e94a) >> 29 {
        0 => (c == 0x200d).then(|| zero_width_joiner(before(s, i))),
        1 => (c == 0x00b7).then(|| middle_dot(s, i)),
        2 => (c == 0x05f3 || c == 0x05f4).then(|| hebrew_punctuation(before(s, i))),
        3 => (0x0660..=0x0669)
            .contains(&c)
            .then(|| arabic_indic_digits(s, '\u{06f0}', '\u{06f9}', context)),
        4 => (0x06f0..=0x06f9)
            .contains(&c)
            .then(|| arabic_indic_digits(s, '\u{0660}', '\u{0669}', context)),
        5 => (c == 0x30fb).then(|| katakana_middle_dot(s, context)),
        6 => (c == 0x0375).then(|| greek_lower_numeral_sign(s, i)),
        7 => (c == 0x200c).then(|| zero_width_nonjoiner(s, i)),
        _ => unreachable!(),
    }
}

fn is_virama(c: char) -> bool {
    const fn hash_reduce(x: u32) -> u32 {
        let x1 = (x as u64).wrapping_add(0xAC78B43Eu64);
        let x2 = ((x1 >> 32) ^ x1) as u32;
        let x3 = ((x2 >> 16) ^ x2).wrapping_mul(0x45D9F3B);
        ((x3 as u64).wrapping_mul(VIRAMA_LEN as u64) >> 32) as u32
    }
    let c = c as u32;
    VIRAMA[hash_reduce(c) as usize] == c
}

fn is_greek(c: char) -> bool {
    !is_valid_binary(GREEK.binary_search(&(c as u32)))
}

fn is_transparent(c: char) -> bool {
    match c {
        '\0'..='\u{ffff}' => !is_valid_binary(TRANSPARENT_U16.binary_search(&(c as u16))),
        '\u{10000}'..='\u{1ffff}' => !is_valid_binary(TRANSPARENT_U17.binary_search(&(c as u16))),
        '\u{e0001}' | '\u{e0020}'..='\u{e007f}' | '\u{e0100}'..='\u{e01ef}' => true,
        _ => false,
    }
}

fn is_kana_or_han(c: char) -> bool {
    !is_valid_binary(KANA_HAN.binary_search(&(c as u32)))
}

fn is_dual_joining(c: char) -> bool {
    match u16::try_from(c) {
        Ok(c) => !is_valid_binary(DUAL_JOINING.binary_search(&c)),
        Err(_) => false,
    }
}

fn is_right_joining(c: char) -> bool {
    match u16::try_from(c) {
        Ok(c) => !is_valid_binary(RIGHT_JOINING.binary_search(&c)),
        Err(_) => false,
    }
}

fn is_hebrew(c: char) -> bool {
    matches!(
        c,
            '\u{0591}'..='\u{05c7}'
            | '\u{05d0}'..='\u{05ea}'
            | '\u{05f0}'..='\u{05f4}'
            | '\u{fb1d}'..='\u{fb36}'
            | '\u{fb38}'..='\u{fb3c}'
            | '\u{fb3e}'
            | '\u{fb40}'..='\u{fb41}'
            | '\u{fb43}'..='\u{fb44}'
            | '\u{fb46}'..='\u{fb4f}',
    )
}

#[inline]
fn is_valid_binary(res: Result<usize, usize>) -> bool {
    match res {
        Ok(i) => i & 1 == 1,
        Err(i) => i & 1 != 1,
    }
}

const VIRAMA_LEN: usize = 46;
static VIRAMA: [u32; VIRAMA_LEN] = [
    0x0a4d, 0x1a60, 0x0f84, 0xaaf6, 0x0ccd, 0x1734, 0xa8c4, 0x17d2, 0x0acd, 0x0000, 0x0000,
    0x11046, 0x0000, 0x0d4d, 0x103a, 0xa9c0, 0x110b9, 0x0b4d, 0x0000, 0x0dca, 0x11133, 0x0000,
    0x11134, 0x0e3a, 0x0000, 0x10a3f, 0x1039, 0x111c0, 0x116b6, 0x094d, 0x1714, 0x0000, 0xa806,
    0x0bcd, 0x1b44, 0x0000, 0x2d7f, 0x09cd, 0x0000, 0x1bf2, 0x1bf3, 0xabed, 0x0c4d, 0x1baa, 0x1bab,
    0xa953,
];

static KANA_HAN: [u32; 52] = [
    0x2e80, 0x2e9a, 0x2e9b, 0x2ef4, 0x2f00, 0x2fd6, 0x3005, 0x3006, 0x3007, 0x3008, 0x3021, 0x302a,
    0x3038, 0x303c, 0x3041, 0x3097, 0x309d, 0x30a0, 0x30a1, 0x30fb, 0x30fd, 0x3100, 0x31f0, 0x3200,
    0x32d0, 0x32ff, 0x3300, 0x3358, 0x3400, 0x4db6, 0x4e00, 0x9fcd, 0xf900, 0xfa6e, 0xfa70, 0xfada,
    0xff66, 0xff70, 0xff71, 0xff9e, 0x1b000, 0x1b002, 0x1f200, 0x1f201, 0x20000, 0x2a6d7, 0x2a700,
    0x2b735, 0x2b740, 0x2b81e, 0x2f800, 0x2fa1e,
];

static GREEK: [u32; 66] = [
    0x0370, 0x0374, 0x0375, 0x0378, 0x037a, 0x037e, 0x0384, 0x0385, 0x0386, 0x0387, 0x0388, 0x038b,
    0x038c, 0x038d, 0x038e, 0x03a2, 0x03a3, 0x03e2, 0x03f0, 0x0400, 0x1d26, 0x1d2b, 0x1d5d, 0x1d62,
    0x1d66, 0x1d6b, 0x1dbf, 0x1dc0, 0x1f00, 0x1f16, 0x1f18, 0x1f1e, 0x1f20, 0x1f46, 0x1f48, 0x1f4e,
    0x1f50, 0x1f58, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c, 0x1f5d, 0x1f5e, 0x1f5f, 0x1f7e, 0x1f80, 0x1fb5,
    0x1fb6, 0x1fc5, 0x1fc6, 0x1fd4, 0x1fd6, 0x1fdc, 0x1fdd, 0x1ff0, 0x1ff2, 0x1ff5, 0x1ff6, 0x1fff,
    0x2126, 0x2127, 0x10140, 0x1018b, 0x1d200, 0x1d246,
];

static DUAL_JOINING: [u16; 82] = [
    0x0620, 0x0621, 0x0626, 0x0627, 0x0628, 0x0629, 0x062a, 0x062f, 0x0633, 0x0640, 0x0641, 0x0648,
    0x0649, 0x064b, 0x066e, 0x0670, 0x0678, 0x0688, 0x069a, 0x06c0, 0x06c1, 0x06c3, 0x06cc, 0x06cd,
    0x06ce, 0x06cf, 0x06d0, 0x06d2, 0x06fa, 0x06fd, 0x06ff, 0x0700, 0x0712, 0x0715, 0x071a, 0x071e,
    0x071f, 0x0728, 0x0729, 0x072a, 0x072b, 0x072c, 0x072d, 0x072f, 0x074e, 0x0759, 0x075c, 0x076b,
    0x076d, 0x0771, 0x0772, 0x0773, 0x0775, 0x0778, 0x077a, 0x0780, 0x07ca, 0x07eb, 0x0841, 0x0846,
    0x0847, 0x0849, 0x084a, 0x084f, 0x0850, 0x0854, 0x0855, 0x0856, 0x08a0, 0x08a1, 0x08a2, 0x08aa,
    0x1807, 0x1808, 0x1820, 0x1878, 0x1887, 0x18a9, 0x18aa, 0x18ab, 0xa840, 0xa872,
];

static RIGHT_JOINING: [u16; 68] = [
    0x0622, 0x0626, 0x0627, 0x0628, 0x0629, 0x062a, 0x062f, 0x0633, 0x0648, 0x0649, 0x0671, 0x0674,
    0x0675, 0x0678, 0x0688, 0x069a, 0x06c0, 0x06c1, 0x06c3, 0x06cc, 0x06cd, 0x06ce, 0x06cf, 0x06d0,
    0x06d2, 0x06d4, 0x06d5, 0x06d6, 0x06ee, 0x06f0, 0x0710, 0x0711, 0x0715, 0x071a, 0x071e, 0x071f,
    0x0728, 0x0729, 0x072a, 0x072b, 0x072c, 0x072d, 0x072f, 0x0730, 0x074d, 0x074e, 0x0759, 0x075c,
    0x076b, 0x076d, 0x0771, 0x0772, 0x0773, 0x0775, 0x0778, 0x077a, 0x0840, 0x0841, 0x0846, 0x0847,
    0x0849, 0x084a, 0x084f, 0x0850, 0x0854, 0x0855, 0x08aa, 0x08ad,
];

static TRANSPARENT_U16: [u16; 404] = [
    0x00ad, 0x00ae, 0x0300, 0x0370, 0x0483, 0x048a, 0x0591, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c3,
    0x05c4, 0x05c6, 0x05c7, 0x05c8, 0x0610, 0x061b, 0x061c, 0x061d, 0x064b, 0x0660, 0x0670, 0x0671,
    0x06d6, 0x06dd, 0x06df, 0x06e5, 0x06e7, 0x06e9, 0x06ea, 0x06ee, 0x070f, 0x0710, 0x0711, 0x0712,
    0x0730, 0x074b, 0x07a6, 0x07b1, 0x07eb, 0x07f4, 0x0816, 0x081a, 0x081b, 0x0824, 0x0825, 0x0828,
    0x0829, 0x082e, 0x0859, 0x085c, 0x08e4, 0x08ff, 0x0900, 0x0903, 0x093a, 0x093b, 0x093c, 0x093d,
    0x0941, 0x0949, 0x094d, 0x094e, 0x0951, 0x0958, 0x0962, 0x0964, 0x0981, 0x0982, 0x09bc, 0x09bd,
    0x09c1, 0x09c5, 0x09cd, 0x09ce, 0x09e2, 0x09e4, 0x0a01, 0x0a03, 0x0a3c, 0x0a3d, 0x0a41, 0x0a43,
    0x0a47, 0x0a49, 0x0a4b, 0x0a4e, 0x0a51, 0x0a52, 0x0a70, 0x0a72, 0x0a75, 0x0a76, 0x0a81, 0x0a83,
    0x0abc, 0x0abd, 0x0ac1, 0x0ac6, 0x0ac7, 0x0ac9, 0x0acd, 0x0ace, 0x0ae2, 0x0ae4, 0x0b01, 0x0b02,
    0x0b3c, 0x0b3d, 0x0b3f, 0x0b40, 0x0b41, 0x0b45, 0x0b4d, 0x0b4e, 0x0b56, 0x0b57, 0x0b62, 0x0b64,
    0x0b82, 0x0b83, 0x0bc0, 0x0bc1, 0x0bcd, 0x0bce, 0x0c3e, 0x0c41, 0x0c46, 0x0c49, 0x0c4a, 0x0c4e,
    0x0c55, 0x0c57, 0x0c62, 0x0c64, 0x0cbc, 0x0cbd, 0x0cbf, 0x0cc0, 0x0cc6, 0x0cc7, 0x0ccc, 0x0cce,
    0x0ce2, 0x0ce4, 0x0d41, 0x0d45, 0x0d4d, 0x0d4e, 0x0d62, 0x0d64, 0x0dca, 0x0dcb, 0x0dd2, 0x0dd5,
    0x0dd6, 0x0dd7, 0x0e31, 0x0e32, 0x0e34, 0x0e3b, 0x0e47, 0x0e4f, 0x0eb1, 0x0eb2, 0x0eb4, 0x0eba,
    0x0ebb, 0x0ebd, 0x0ec8, 0x0ece, 0x0f18, 0x0f1a, 0x0f35, 0x0f36, 0x0f37, 0x0f38, 0x0f39, 0x0f3a,
    0x0f71, 0x0f7f, 0x0f80, 0x0f85, 0x0f86, 0x0f88, 0x0f8d, 0x0f98, 0x0f99, 0x0fbd, 0x0fc6, 0x0fc7,
    0x102d, 0x1031, 0x1032, 0x1038, 0x1039, 0x103b, 0x103d, 0x103f, 0x1058, 0x105a, 0x105e, 0x1061,
    0x1071, 0x1075, 0x1082, 0x1083, 0x1085, 0x1087, 0x108d, 0x108e, 0x109d, 0x109e, 0x135d, 0x1360,
    0x1712, 0x1715, 0x1732, 0x1735, 0x1752, 0x1754, 0x1772, 0x1774, 0x17b4, 0x17b6, 0x17b7, 0x17be,
    0x17c6, 0x17c7, 0x17c9, 0x17d4, 0x17dd, 0x17de, 0x180b, 0x180e, 0x18a9, 0x18aa, 0x1920, 0x1923,
    0x1927, 0x1929, 0x1932, 0x1933, 0x1939, 0x193c, 0x1a17, 0x1a19, 0x1a1b, 0x1a1c, 0x1a56, 0x1a57,
    0x1a58, 0x1a5f, 0x1a60, 0x1a61, 0x1a62, 0x1a63, 0x1a65, 0x1a6d, 0x1a73, 0x1a7d, 0x1a7f, 0x1a80,
    0x1b00, 0x1b04, 0x1b34, 0x1b35, 0x1b36, 0x1b3b, 0x1b3c, 0x1b3d, 0x1b42, 0x1b43, 0x1b6b, 0x1b74,
    0x1b80, 0x1b82, 0x1ba2, 0x1ba6, 0x1ba8, 0x1baa, 0x1bab, 0x1bac, 0x1be6, 0x1be7, 0x1be8, 0x1bea,
    0x1bed, 0x1bee, 0x1bef, 0x1bf2, 0x1c2c, 0x1c34, 0x1c36, 0x1c38, 0x1cd0, 0x1cd3, 0x1cd4, 0x1ce1,
    0x1ce2, 0x1ce9, 0x1ced, 0x1cee, 0x1cf4, 0x1cf5, 0x1dc0, 0x1de7, 0x1dfc, 0x1e00, 0x200b, 0x200c,
    0x200e, 0x2010, 0x202a, 0x202f, 0x2060, 0x2065, 0x206a, 0x2070, 0x20d0, 0x20f1, 0x2cef, 0x2cf2,
    0x2d7f, 0x2d80, 0x2de0, 0x2e00, 0x302a, 0x302e, 0x3099, 0x309b, 0xa66f, 0xa673, 0xa674, 0xa67e,
    0xa69f, 0xa6a0, 0xa6f0, 0xa6f2, 0xa802, 0xa803, 0xa806, 0xa807, 0xa80b, 0xa80c, 0xa825, 0xa827,
    0xa8c4, 0xa8c5, 0xa8e0, 0xa8f2, 0xa926, 0xa92e, 0xa947, 0xa952, 0xa980, 0xa983, 0xa9b3, 0xa9b4,
    0xa9b6, 0xa9ba, 0xa9bc, 0xa9bd, 0xaa29, 0xaa2f, 0xaa31, 0xaa33, 0xaa35, 0xaa37, 0xaa43, 0xaa44,
    0xaa4c, 0xaa4d, 0xaab0, 0xaab1, 0xaab2, 0xaab5, 0xaab7, 0xaab9, 0xaabe, 0xaac0, 0xaac1, 0xaac2,
    0xaaec, 0xaaee, 0xaaf6, 0xaaf7, 0xabe5, 0xabe6, 0xabe8, 0xabe9, 0xabed, 0xabee, 0xfb1e, 0xfb1f,
    0xfe00, 0xfe10, 0xfe20, 0xfe27, 0xfeff, 0xff00, 0xfff9, 0xfffc,
];
static TRANSPARENT_U17: [u16; 54] = [
    0x01fd, 0x01fe, 0x0a01, 0x0a04, 0x0a05, 0x0a07, 0x0a0c, 0x0a10, 0x0a38, 0x0a3b, 0x0a3f, 0x0a40,
    0x1001, 0x1002, 0x1038, 0x1047, 0x1080, 0x1082, 0x10b3, 0x10b7, 0x10b9, 0x10bb, 0x10bd, 0x10be,
    0x1100, 0x1103, 0x1127, 0x112c, 0x112d, 0x1135, 0x1180, 0x1182, 0x11b6, 0x11bf, 0x16ab, 0x16ac,
    0x16ad, 0x16ae, 0x16b0, 0x16b6, 0x16b7, 0x16b8, 0x6f8f, 0x6f93, 0xd167, 0xd16a, 0xd173, 0xd183,
    0xd185, 0xd18c, 0xd1aa, 0xd1ae, 0xd242, 0xd245,
];

static RANGES_U16: [u16; 751] = [
    0x034f, 0x0350, 0x0378, 0x037a, 0x037f, 0x0384, 0x038b, 0x038c, 0x038d, 0x038e, 0x03a2, 0x03a3,
    0x0528, 0x0531, 0x0557, 0x0559, 0x0560, 0x0561, 0x0588, 0x0589, 0x058b, 0x058f, 0x0590, 0x0591,
    0x05c8, 0x05d0, 0x05eb, 0x05f0, 0x05f5, 0x0606, 0x061c, 0x061e, 0x0640, 0x0641, 0x06dd, 0x06de,
    0x070e, 0x0710, 0x074b, 0x074d, 0x07b2, 0x07c0, 0x07fa, 0x0800, 0x082e, 0x0830, 0x083f, 0x0840,
    0x085c, 0x085e, 0x085f, 0x08a0, 0x08a1, 0x08a2, 0x08ad, 0x08e4, 0x08ff, 0x0900, 0x0978, 0x0979,
    0x0980, 0x0981, 0x0984, 0x0985, 0x098d, 0x098f, 0x0991, 0x0993, 0x09a9, 0x09aa, 0x09b1, 0x09b2,
    0x09b3, 0x09b6, 0x09ba, 0x09bc, 0x09c5, 0x09c7, 0x09c9, 0x09cb, 0x09cf, 0x09d7, 0x09d8, 0x09dc,
    0x09de, 0x09df, 0x09e4, 0x09e6, 0x09fc, 0x0a01, 0x0a04, 0x0a05, 0x0a0b, 0x0a0f, 0x0a11, 0x0a13,
    0x0a29, 0x0a2a, 0x0a31, 0x0a32, 0x0a34, 0x0a35, 0x0a37, 0x0a38, 0x0a3a, 0x0a3c, 0x0a3d, 0x0a3e,
    0x0a43, 0x0a47, 0x0a49, 0x0a4b, 0x0a4e, 0x0a51, 0x0a52, 0x0a59, 0x0a5d, 0x0a5e, 0x0a5f, 0x0a66,
    0x0a76, 0x0a81, 0x0a84, 0x0a85, 0x0a8e, 0x0a8f, 0x0a92, 0x0a93, 0x0aa9, 0x0aaa, 0x0ab1, 0x0ab2,
    0x0ab4, 0x0ab5, 0x0aba, 0x0abc, 0x0ac6, 0x0ac7, 0x0aca, 0x0acb, 0x0ace, 0x0ad0, 0x0ad1, 0x0ae0,
    0x0ae4, 0x0ae6, 0x0af2, 0x0b01, 0x0b04, 0x0b05, 0x0b0d, 0x0b0f, 0x0b11, 0x0b13, 0x0b29, 0x0b2a,
    0x0b31, 0x0b32, 0x0b34, 0x0b35, 0x0b3a, 0x0b3c, 0x0b45, 0x0b47, 0x0b49, 0x0b4b, 0x0b4e, 0x0b56,
    0x0b58, 0x0b5c, 0x0b5e, 0x0b5f, 0x0b64, 0x0b66, 0x0b78, 0x0b82, 0x0b84, 0x0b85, 0x0b8b, 0x0b8e,
    0x0b91, 0x0b92, 0x0b96, 0x0b99, 0x0b9b, 0x0b9c, 0x0b9d, 0x0b9e, 0x0ba0, 0x0ba3, 0x0ba5, 0x0ba8,
    0x0bab, 0x0bae, 0x0bba, 0x0bbe, 0x0bc3, 0x0bc6, 0x0bc9, 0x0bca, 0x0bce, 0x0bd0, 0x0bd1, 0x0bd7,
    0x0bd8, 0x0be6, 0x0bfb, 0x0c01, 0x0c04, 0x0c05, 0x0c0d, 0x0c0e, 0x0c11, 0x0c12, 0x0c29, 0x0c2a,
    0x0c34, 0x0c35, 0x0c3a, 0x0c3d, 0x0c45, 0x0c46, 0x0c49, 0x0c4a, 0x0c4e, 0x0c55, 0x0c57, 0x0c58,
    0x0c5a, 0x0c60, 0x0c64, 0x0c66, 0x0c70, 0x0c78, 0x0c80, 0x0c82, 0x0c84, 0x0c85, 0x0c8d, 0x0c8e,
    0x0c91, 0x0c92, 0x0ca9, 0x0caa, 0x0cb4, 0x0cb5, 0x0cba, 0x0cbc, 0x0cc5, 0x0cc6, 0x0cc9, 0x0cca,
    0x0cce, 0x0cd5, 0x0cd7, 0x0cde, 0x0cdf, 0x0ce0, 0x0ce4, 0x0ce6, 0x0cf0, 0x0cf1, 0x0cf3, 0x0d02,
    0x0d04, 0x0d05, 0x0d0d, 0x0d0e, 0x0d11, 0x0d12, 0x0d3b, 0x0d3d, 0x0d45, 0x0d46, 0x0d49, 0x0d4a,
    0x0d4f, 0x0d57, 0x0d58, 0x0d60, 0x0d64, 0x0d66, 0x0d76, 0x0d79, 0x0d80, 0x0d82, 0x0d84, 0x0d85,
    0x0d97, 0x0d9a, 0x0db2, 0x0db3, 0x0dbc, 0x0dbd, 0x0dbe, 0x0dc0, 0x0dc7, 0x0dca, 0x0dcb, 0x0dcf,
    0x0dd5, 0x0dd6, 0x0dd7, 0x0dd8, 0x0de0, 0x0df2, 0x0df5, 0x0e01, 0x0e3b, 0x0e3f, 0x0e5c, 0x0e81,
    0x0e83, 0x0e84, 0x0e85, 0x0e87, 0x0e89, 0x0e8a, 0x0e8b, 0x0e8d, 0x0e8e, 0x0e94, 0x0e98, 0x0e99,
    0x0ea0, 0x0ea1, 0x0ea4, 0x0ea5, 0x0ea6, 0x0ea7, 0x0ea8, 0x0eaa, 0x0eac, 0x0ead, 0x0eba, 0x0ebb,
    0x0ebe, 0x0ec0, 0x0ec5, 0x0ec6, 0x0ec7, 0x0ec8, 0x0ece, 0x0ed0, 0x0eda, 0x0edc, 0x0ee0, 0x0f00,
    0x0f48, 0x0f49, 0x0f6d, 0x0f71, 0x0f98, 0x0f99, 0x0fbd, 0x0fbe, 0x0fcd, 0x0fce, 0x0fdb, 0x1000,
    0x10c6, 0x10c7, 0x10c8, 0x10cd, 0x10ce, 0x10d0, 0x1100, 0x1200, 0x1249, 0x124a, 0x124e, 0x1250,
    0x1257, 0x1258, 0x1259, 0x125a, 0x125e, 0x1260, 0x1289, 0x128a, 0x128e, 0x1290, 0x12b1, 0x12b2,
    0x12b6, 0x12b8, 0x12bf, 0x12c0, 0x12c1, 0x12c2, 0x12c6, 0x12c8, 0x12d7, 0x12d8, 0x1311, 0x1312,
    0x1316, 0x1318, 0x135b, 0x135d, 0x137d, 0x1380, 0x139a, 0x13a0, 0x13f5, 0x1400, 0x169d, 0x16a0,
    0x16f1, 0x1700, 0x170d, 0x170e, 0x1715, 0x1720, 0x1737, 0x1740, 0x1754, 0x1760, 0x176d, 0x176e,
    0x1771, 0x1772, 0x1774, 0x1780, 0x17b4, 0x17b6, 0x17de, 0x17e0, 0x17ea, 0x17f0, 0x17fa, 0x1800,
    0x180b, 0x1810, 0x181a, 0x1820, 0x1878, 0x1880, 0x18ab, 0x18b0, 0x18f6, 0x1900, 0x191d, 0x1920,
    0x192c, 0x1930, 0x193c, 0x1940, 0x1941, 0x1944, 0x196e, 0x1970, 0x1975, 0x1980, 0x19ac, 0x19b0,
    0x19ca, 0x19d0, 0x19db, 0x19de, 0x1a1c, 0x1a1e, 0x1a5f, 0x1a60, 0x1a7d, 0x1a7f, 0x1a8a, 0x1a90,
    0x1a9a, 0x1aa0, 0x1aae, 0x1b00, 0x1b4c, 0x1b50, 0x1b7d, 0x1b80, 0x1bf4, 0x1bfc, 0x1c38, 0x1c3b,
    0x1c4a, 0x1c4d, 0x1c80, 0x1cc0, 0x1cc8, 0x1cd0, 0x1cf7, 0x1d00, 0x1de7, 0x1dfc, 0x1f16, 0x1f18,
    0x1f1e, 0x1f20, 0x1f46, 0x1f48, 0x1f4e, 0x1f50, 0x1f58, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c, 0x1f5d,
    0x1f5e, 0x1f5f, 0x1f7e, 0x1f80, 0x1fb5, 0x1fb6, 0x1fc5, 0x1fc6, 0x1fd4, 0x1fd6, 0x1fdc, 0x1fdd,
    0x1ff0, 0x1ff2, 0x1ff5, 0x1ff6, 0x1fff, 0x2000, 0x200b, 0x2010, 0x2028, 0x202f, 0x2060, 0x2070,
    0x2072, 0x2074, 0x208f, 0x2090, 0x209d, 0x20a0, 0x20bb, 0x20d0, 0x20f1, 0x2100, 0x218a, 0x2190,
    0x23f4, 0x2400, 0x2427, 0x2440, 0x244b, 0x2460, 0x2700, 0x2701, 0x2b4d, 0x2b50, 0x2b5a, 0x2c00,
    0x2c2f, 0x2c30, 0x2c5f, 0x2c60, 0x2cf4, 0x2cf9, 0x2d26, 0x2d27, 0x2d28, 0x2d2d, 0x2d2e, 0x2d30,
    0x2d68, 0x2d6f, 0x2d71, 0x2d7f, 0x2d97, 0x2da0, 0x2da7, 0x2da8, 0x2daf, 0x2db0, 0x2db7, 0x2db8,
    0x2dbf, 0x2dc0, 0x2dc7, 0x2dc8, 0x2dcf, 0x2dd0, 0x2dd7, 0x2dd8, 0x2ddf, 0x2de0, 0x2e3c, 0x2e80,
    0x2e9a, 0x2e9b, 0x2ef4, 0x2f00, 0x2fd6, 0x2ff0, 0x2ffc, 0x3000, 0x302e, 0x3030, 0x3031, 0x3036,
    0x303b, 0x303c, 0x3040, 0x3041, 0x3097, 0x3099, 0x3100, 0x3105, 0x312e, 0x3131, 0x3164, 0x3165,
    0x318f, 0x3190, 0x31bb, 0x31c0, 0x31e4, 0x31f0, 0x321f, 0x3220, 0x32ff, 0x3300, 0x4db6, 0x4dc0,
    0x9fcd, 0xa000, 0xa48d, 0xa490, 0xa4c7, 0xa4d0, 0xa62c, 0xa640, 0xa698, 0xa69f, 0xa6f8, 0xa700,
    0xa78f, 0xa790, 0xa794, 0xa7a0, 0xa7ab, 0xa7f8, 0xa82c, 0xa830, 0xa83a, 0xa840, 0xa878, 0xa880,
    0xa8c5, 0xa8ce, 0xa8da, 0xa8e0, 0xa8fc, 0xa900, 0xa954, 0xa95f, 0xa960, 0xa980, 0xa9ce, 0xa9cf,
    0xa9da, 0xa9de, 0xa9e0, 0xaa00, 0xaa37, 0xaa40, 0xaa4e, 0xaa50, 0xaa5a, 0xaa5c, 0xaa7c, 0xaa80,
    0xaac3, 0xaadb, 0xaaf7, 0xab01, 0xab07, 0xab09, 0xab0f, 0xab11, 0xab17, 0xab20, 0xab27, 0xab28,
    0xab2f, 0xabc0, 0xabee, 0xabf0, 0xabfa, 0xac00, 0xd7a4, 0xf900, 0xfa6e, 0xfa70, 0xfada, 0xfb00,
    0xfb07, 0xfb13, 0xfb18, 0xfb1d, 0xfb37, 0xfb38, 0xfb3d, 0xfb3e, 0xfb3f, 0xfb40, 0xfb42, 0xfb43,
    0xfb45, 0xfb46, 0xfbc2, 0xfbd3, 0xfd40, 0xfd50, 0xfd90, 0xfd92, 0xfdc8, 0xfdf0, 0xfdfe, 0xfe10,
    0xfe1a, 0xfe20, 0xfe27, 0xfe30, 0xfe53, 0xfe54, 0xfe67, 0xfe68, 0xfe6c, 0xfe70, 0xfe75, 0xfe76,
    0xfefd, 0xff01, 0xffa0, 0xffa1, 0xffbf, 0xffc2, 0xffc8, 0xffca, 0xffd0, 0xffd2, 0xffd8, 0xffda,
    0xffdd, 0xffe0, 0xffe7, 0xffe8, 0xffef, 0xfffc, 0xfffe,
];

static RANGES_U17: [u16; 327] = [
    0x000c, 0x000d, 0x0027, 0x0028, 0x003b, 0x003c, 0x003e, 0x003f, 0x004e, 0x0050, 0x005e, 0x0080,
    0x00fb, 0x0100, 0x0103, 0x0107, 0x0134, 0x0137, 0x018b, 0x0190, 0x019c, 0x01d0, 0x01fe, 0x0280,
    0x029d, 0x02a0, 0x02d1, 0x0300, 0x031f, 0x0320, 0x0324, 0x0330, 0x034b, 0x0380, 0x039e, 0x039f,
    0x03c4, 0x03c8, 0x03d6, 0x0400, 0x049e, 0x04a0, 0x04aa, 0x0800, 0x0806, 0x0808, 0x0809, 0x080a,
    0x0836, 0x0837, 0x0839, 0x083c, 0x083d, 0x083f, 0x0856, 0x0857, 0x0860, 0x0900, 0x091c, 0x091f,
    0x093a, 0x093f, 0x0940, 0x0980, 0x09b8, 0x09be, 0x09c0, 0x0a00, 0x0a04, 0x0a05, 0x0a07, 0x0a0c,
    0x0a14, 0x0a15, 0x0a18, 0x0a19, 0x0a34, 0x0a38, 0x0a3b, 0x0a3f, 0x0a48, 0x0a50, 0x0a59, 0x0a60,
    0x0a80, 0x0b00, 0x0b36, 0x0b39, 0x0b56, 0x0b58, 0x0b73, 0x0b78, 0x0b80, 0x0c00, 0x0c49, 0x0e60,
    0x0e7f, 0x1000, 0x104e, 0x1052, 0x1070, 0x1080, 0x10bd, 0x10be, 0x10c2, 0x10d0, 0x10e9, 0x10f0,
    0x10fa, 0x1100, 0x1135, 0x1136, 0x1144, 0x1180, 0x11c9, 0x11d0, 0x11da, 0x1680, 0x16b8, 0x16c0,
    0x16ca, 0x2000, 0x236f, 0x2400, 0x2463, 0x2470, 0x2474, 0x3000, 0x342f, 0x6800, 0x6a39, 0x6f00,
    0x6f45, 0x6f50, 0x6f7f, 0x6f8f, 0x6fa0, 0xb000, 0xb002, 0xd000, 0xd0f6, 0xd100, 0xd127, 0xd129,
    0xd173, 0xd17b, 0xd1de, 0xd200, 0xd246, 0xd300, 0xd357, 0xd360, 0xd372, 0xd400, 0xd455, 0xd456,
    0xd49d, 0xd49e, 0xd4a0, 0xd4a2, 0xd4a3, 0xd4a5, 0xd4a7, 0xd4a9, 0xd4ad, 0xd4ae, 0xd4ba, 0xd4bb,
    0xd4bc, 0xd4bd, 0xd4c4, 0xd4c5, 0xd506, 0xd507, 0xd50b, 0xd50d, 0xd515, 0xd516, 0xd51d, 0xd51e,
    0xd53a, 0xd53b, 0xd53f, 0xd540, 0xd545, 0xd546, 0xd547, 0xd54a, 0xd551, 0xd552, 0xd6a6, 0xd6a8,
    0xd7cc, 0xd7ce, 0xd800, 0xee00, 0xee04, 0xee05, 0xee20, 0xee21, 0xee23, 0xee24, 0xee25, 0xee27,
    0xee28, 0xee29, 0xee33, 0xee34, 0xee38, 0xee39, 0xee3a, 0xee3b, 0xee3c, 0xee42, 0xee43, 0xee47,
    0xee48, 0xee49, 0xee4a, 0xee4b, 0xee4c, 0xee4d, 0xee50, 0xee51, 0xee53, 0xee54, 0xee55, 0xee57,
    0xee58, 0xee59, 0xee5a, 0xee5b, 0xee5c, 0xee5d, 0xee5e, 0xee5f, 0xee60, 0xee61, 0xee63, 0xee64,
    0xee65, 0xee67, 0xee6b, 0xee6c, 0xee73, 0xee74, 0xee78, 0xee79, 0xee7d, 0xee7e, 0xee7f, 0xee80,
    0xee8a, 0xee8b, 0xee9c, 0xeea1, 0xeea4, 0xeea5, 0xeeaa, 0xeeab, 0xeebc, 0xeef0, 0xeef2, 0xf000,
    0xf02c, 0xf030, 0xf094, 0xf0a0, 0xf0af, 0xf0b1, 0xf0bf, 0xf0c1, 0xf0d0, 0xf0d1, 0xf0e0, 0xf100,
    0xf10b, 0xf110, 0xf12f, 0xf130, 0xf16c, 0xf170, 0xf19b, 0xf1e6, 0xf203, 0xf210, 0xf23b, 0xf240,
    0xf249, 0xf250, 0xf252, 0xf300, 0xf321, 0xf330, 0xf336, 0xf337, 0xf37d, 0xf380, 0xf394, 0xf3a0,
    0xf3c5, 0xf3c6, 0xf3cb, 0xf3e0, 0xf3f1, 0xf400, 0xf43f, 0xf440, 0xf441, 0xf442, 0xf4f8, 0xf4f9,
    0xf4fd, 0xf500, 0xf53e, 0xf540, 0xf544, 0xf550, 0xf568, 0xf5fb, 0xf641, 0xf645, 0xf650, 0xf680,
    0xf6c6, 0xf700, 0xf774,
];

#[cfg(test)]
mod test {
    use super::{is_opaque_string, is_opaque_string_ascii};

    static VALID: [&str; 109] = [
        "  ",
        "{}",
        "a",
        "A",
        "ab",
        "abc",
        "ab٩cd",
        "ab٩cۯ",
        "ab٩cۺ",
        "ab۰cd",
        "ab۰c\u{65f}",
        "ab۰c٪",
        "at",
        "aT",
        "a#",
        "aÅ",
        "A͵΄",
        "aÅ",
        "a・bc㍗",
        "a・b𛀁c",
        "A\u{94d}\u{200c}B",
        "A\u{94d}\u{200d}B",
        "a＃",
        "foo bar",
        "Foo Bar",
        "guybrush",
        "Guybrush",
        "guybrush threepwood",
        "   Guybrush     Threepwood  ",
        "Guybrush   Threepwood  ",
        "Guybrush Threepwood",
        "heLLo",
        "Hello",
        "   hello  world   ",
        "hello  world",
        "hello world",
        "Hi",
        "I'm Guybrush Threepwood, Mighty Pirate ☠",
        "Look behind you, a three-headed monkey!🐒",
        "t",
        "T",
        "ta",
        "Ta",
        "  test",
        " test",
        "t  est",
        "test ",
        "test",
        "Test",
        "test good",
        "TestName",
        "test\u{a0}",
        "testusername",
        "TestUserName",
        "te\u{a0}st",
        "That’s the second biggest 🐵 I’ve ever seen!",
        "#",
        "#a",
        "###",
        "f",
        "l·l",
        "\u{a0}test",
        "ª",
        "Å",
        "Åa",
        "ÅΩḍ\u{307}",
        "͵΄",
        "־",
        "־Hello",
        "\u{65f}",
        "٠",
        "٥",
        "٩",
        "٪",
        "ۯ",
        "۰",
        "۵",
        "۹",
        "ۺ",
        "\u{205f} hello \u{205f} world \u{205f} ",
        " \u{205f}test\u{205f} ",
        "\u{205f}test\u{205f}",
        "\u{205f}\u{205f}hello\u{205f}\u{205f}world\u{205f}\u{205f}",
        "Å",
        "Åa",
        "ÅΩḋ\u{323}",
        "〇・bc",
        "װ׳",
        "װ״",
        "a",
        "b",
        "ئ\u{200c}\u{5bf}ئ",
        "ئ\u{200c}ئ",
        "ئ\u{5bf}\u{5bf}\u{200c}\u{5bf}\u{5bf}\u{5bf}\u{5bf}ئ",
        "c",
        "d",
        "e",
        "g",
        "\u{94d}\u{200c}",
        "\u{94d}\u{200d}",
        "ꡲ\u{5bf}\u{200c}\u{5bf}ة",
        "＃",
        "＃a",
        "＃＃＃",
        "xxxxx",
        "XxXxX",
        "YYYװ״XXX",
        "Zs",
        "πßå",
    ];

    static INVALID: [&str; 30] = [
        "",
        "ab٩c۰",
        "ab٩c۹",
        "ab۰c٠",
        "ab۰c٩",
        "A·A",
        "a·b",
        "A״",
        "A\u{200c}",
        "a\u{200d}",
        "A\u{200d}",
        "a・b",
        "A\u{5bf}\u{200c}",
        "A\u{5bf}\u{5bf}\u{200c}\u{5bf}\u{5bf}\u{5bf}\u{5bf}ئ",
        "l·",
        "l·a",
        "l·A",
        "·",
        "͵",
        "͵A",
        "׳",
        "\u{200c}",
        "\u{200d}",
        "\u{200d}A",
        "・",
        "\u{5bf}\u{200c}",
        "ꡲ\u{5bf}\u{200c}",
        "ꡲ\u{5bf}\u{200c}A",
        "ꡲ\u{5bf}\u{200c}\u{5bf}",
        "ꡲ\u{5bf}\u{200c}\u{5bf}A",
    ];

    #[test]
    fn test_opaque_string() {
        for &valid in &VALID {
            assert!(is_opaque_string(valid), "\"{valid}\" should be a valid opaque string");
        }

        for &invalid in &INVALID {
            assert!(
                !is_opaque_string(invalid),
                "\"{invalid}\" should not be a valid opaque string"
            );
        }
    }

    #[test]
    fn test_quoted_text_ascii() {
        for &valid in VALID.iter().filter(|s| s.is_ascii()) {
            assert!(
                is_opaque_string_ascii(valid),
                "\"{valid}\" should be valid opaque ascii string"
            );
        }

        for &invalid in VALID.iter().filter(|s| !s.is_ascii()).chain(&INVALID) {
            assert!(
                !is_opaque_string_ascii(invalid),
                "\"{invalid}\" should not be a valid opaque ascii string"
            );
        }
    }
}
